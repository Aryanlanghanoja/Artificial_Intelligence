# -*- coding: utf-8 -*-
"""Exp_8_Word_Embedding.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fQwFgx6t1uq-2mARbZcOVzOOVxc7l6yp
"""

# 1. Load Necessary Modules

import matplotlib.pyplot as plt
from collections import Counter
import numpy as np
import pandas as pd
import math
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics.pairwise import cosine_similarity

# 2. Initialize the Documents

# Sample documents
documents = [
    "I am Learning Machine Learning",
    "Machine Learning is a Part of Artificial Intelligence",
    "Natural Language Processing Uses Machine Learning",
    "Chatbot is a Best Example of Natural Language Processing"
]

print("Documents:")
for i, doc in enumerate(documents, 1):
    print(f"{i}. {doc}")

# 3. Tokenize the Documents

tokenized_docs = [doc.lower().split() for doc in documents]

print("Tokenized Documents:")
for i, tokens in enumerate(tokenized_docs, 1):
    print(f"{i}. {tokens}")

# 4. Creating Vocabulary

vocab = sorted(set(word for doc in tokenized_docs for word in doc))
print("Vocabulary:", vocab)

# 5. Counting the Words -> TF Values

tf_matrix = []

for doc in tokenized_docs:
    tf_doc = Counter(doc)
    total_words = len(doc)

    tf_matrix.append([tf_doc[word] / total_words for word in vocab])

print("TF Matrix:")
tf_df = pd.DataFrame(tf_matrix, columns=vocab)
tf_df_transposed = tf_df.transpose()
display(tf_df_transposed)

# 6. Calculate IDF Values

idf_matrix = []
total_docs = len(documents)

for word in vocab:
    word_doc = sum(1 for doc in tokenized_docs if word in doc)
    idf_value = math.log(total_docs / (1 + word_doc))
    idf_matrix.append(idf_value)

idf_df = pd.DataFrame({'Word': vocab, 'IDF': idf_matrix})
print("IDF Values:")
display(idf_df)

# 7. Obtain TF-IDF Values

tf_idf_matrix = np.array(tf_matrix) * np.array(idf_matrix)

print("\nTF-IDF Matrix (Rows: Documents, Columns: Vocabulary):")
tf_idf_df = pd.DataFrame(tf_idf_matrix, columns=vocab)
tf_idf_df_transposed = tf_idf_df.transpose()
display(tf_idf_df_transposed)

# 8. Calculate Cosine Similarity

cosine_values = cosine_similarity(tf_idf_matrix)

print("\nCosine Similarity Matrix:")
cosine_df = pd.DataFrame(cosine_values, index=[f"Doc {i+1}" for i in range(len(documents))],
                         columns=[f"Doc {i+1}" for i in range(len(documents))])
display(cosine_df)

# Plooting the Heatmap

plt.figure(figsize=(8, 6))
sns.heatmap(cosine_values, annot=True, cmap="Blues", fmt=".2f",
            xticklabels=[f"Doc {i+1}" for i in range(len(documents))],
            yticklabels=[f"Doc {i+1}" for i in range(len(documents))])
plt.title("Cosine Similarity Heatmap")
plt.show()